// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id              Int              @id @default(autoincrement())
  name            String
  phone           String?          @unique
  email           String?          @unique
  avatar          String?
  created         DateTime         @default(now())
  updated         DateTime         @updatedAt
  tokens          Token[]
  products        Product[]
  wishes          Wish[]
  posts           Post[]
  answers         Answer[]
  recommendations Recommendation[]
}

model Token {
  id      Int      @id @default(autoincrement())
  payload String   @unique
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  created DateTime @default(now())
  updated DateTime @updatedAt

  @@index([userId])
}

//payload에 유저의 이메일/폰넘버 정보 확인하라고 보내줄것임
//db에 실제 user 전체 데이터가 들어가지는 않기 때문에 user, userId가 있음 
//user 필드는 디비에 들어가지 않고 대신 userId가 디비에 들어감

//Cascade
//User 삭제되면 Token도 삭제되게 연결

model Product {
  id          Int      @id @default(autoincrement())
  created     DateTime @default(now())
  updated     DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  image       String
  name        String
  price       Int
  description String   @db.MediumText
  wishes      Wish[]

  @@index([userId])
}

//description는 길이가 좀 길 예정이니까 db에서 미디업 텍스트 설정해주면 된다.
//String에 대한 기본 설정은 varChar()인데 최대 191자 제한있음

model Wish {
  id        Int      @id @default(autoincrement())
  created   DateTime @default(now())
  updated   DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  @@index([userId, productId])
}

model Post {
  id              Int              @id @default(autoincrement())
  created         DateTime         @default(now())
  updated         DateTime         @updatedAt
  title           String           @db.Text
  content         String           @db.MediumText
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  latitude        Float?
  longitude       Float?
  answers         Answer[]
  recommendations Recommendation[]

  @@index([userId])
}

model Answer {
  id      Int      @id @default(autoincrement())
  created DateTime @default(now())
  updated DateTime @updatedAt
  answer  String   @db.MediumText
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  post    Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  Int

  @@index([userId, postId])
}

model Recommendation {
  id      Int      @id @default(autoincrement())
  created DateTime @default(now())
  updated DateTime @updatedAt
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  post    Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  Int

  @@index([userId, postId])
}
