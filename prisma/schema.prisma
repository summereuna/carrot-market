//프리즈마에게 스케마 설명하는 명령어
//npx prisma migrate dev
//새로운 머ㅏ이그레이션 이름 넣어서 DB 변경사항 추적 & 프리즈마 SQL코드로 만들어서 저장해줌

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

//깃헙에 client가 있는 node_modules 안올렸기 때문에 vercel이 배포하려고 하면 알수가 없으니 에러남
//따라서 빌드 진행 중에 prisma generate 명령어 실행해서 버셀이 서버 만들면서 노드모듈 만들 때 프리즈마도 포함되게 해줘야 함

// provider     = "mysql"
// datasource db {
//   provider     = "sqlite"
//   url          = env("DATABASE_URL")
//   relationMode = "prisma"
// }
datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}


model User {
  id              Int              @id @default(autoincrement())
  name            String
  email           String?          @unique
  //password        String?
  phone           String?          @unique
  github_id       String?          @unique
  avatar          String?
  created         DateTime         @default(now())
  updated         DateTime         @updatedAt
  tokens          Token[]
  products        Product[]
  wishes          Wish[]
  posts           Post[]
  answers         Answer[]
  recommendations Recommendation[]
  writtenReviews  Review[]         @relation(name: "writtenReviews")
  receivedReviews Review[]         @relation(name: "receivedReviews")
  sales           Sale[]
  purchases       Purchase[]
  streams         Stream[]
  messages        Message[]
  chats           Chat[]
  chatRooms       ChatRoom[]
  reservations    Reservation[] //상품 여러개 예약 잡을 수 있으니까 배열
}

model Token {
  id      Int      @id @default(autoincrement())
  payload String   @unique
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  created DateTime @default(now())
  updated DateTime @updatedAt

  @@index([userId])
}

//payload에 유저의 이메일/폰넘버 정보 확인하라고 보내줄것임
//db에 실제 user 전체 데이터가 들어가지는 않기 때문에 user, userId가 있음 
//user 필드는 디비에 들어가지 않고 대신 userId가 디비에 들어감

//Cascade
//User 삭제되면 Token도 삭제되게 연결

model Product {
  id          Int          @id @default(autoincrement())
  created     DateTime     @default(now())
  updated     DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  image       String
  name        String
  price       Int
  description String
  wishes      Wish[]
  sales       Sale[] //음 근데 이건 배열로 안해도 되는게 user랑 같음
  purchases   Purchase[]
  chatRooms   ChatRoom[]
  reservation Reservation? //상품 당 예약은 없거나 한 건만 잡을 수 있으니까
  review      Review[] //상품 당 리뷰는 없거나 / 구매자/판매자가 각 1번 씩만 쓸 수 있도록

  @@index([userId])
}

//description는 길이가 좀 길 예정이니까 db에서 미디업 텍스트 설정해주면 된다.
//String에 대한 기본 설정은 varChar()인데 최대 191자 제한있음

model Post {
  id              Int              @id @default(autoincrement())
  created         DateTime         @default(now())
  updated         DateTime         @updatedAt
  title           String
  content         String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  latitude        Float?
  longitude       Float?
  answers         Answer[]
  recommendations Recommendation[]

  @@index([userId])
}

model Answer {
  id      Int      @id @default(autoincrement())
  created DateTime @default(now())
  updated DateTime @updatedAt
  answer  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  post    Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  Int

  @@index([userId, postId])
}

model Recommendation {
  id      Int      @id @default(autoincrement())
  created DateTime @default(now())
  updated DateTime @updatedAt
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  post    Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  Int

  @@index([userId, postId])
}

model Sale {
  id        Int      @id @default(autoincrement())
  created   DateTime @default(now())
  updated   DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  @@index([userId, productId])
}

model Purchase {
  id        Int      @id @default(autoincrement())
  created   DateTime @default(now())
  updated   DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  @@index([userId, productId])
}

model Wish {
  id        Int      @id @default(autoincrement())
  created   DateTime @default(now())
  updated   DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  @@index([userId, productId])
}

model Stream {
  id          Int       @id @default(autoincrement())
  created     DateTime  @default(now())
  updated     DateTime  @updatedAt
  name        String
  price       Int
  description String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  messages    Message[]

  @@index([userId])
}

model Message {
  id       Int      @id @default(autoincrement())
  created  DateTime @default(now())
  updated  DateTime @updatedAt
  message  String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  stream   Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId Int

  @@index([userId, streamId])
}

model ChatRoom {
  id        Int      @id @default(autoincrement())
  created   DateTime @default(now())
  updated   DateTime @updatedAt
  //채팅방 안에 채팅 메시지
  chats     Chat[]
  //채팅방이 연결되는 제품
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  //채팅방 사용 중인 사람들 다대다 many to many
  //users     User[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  @@index([productId, userId])
}

model Chat {
  id              Int      @id @default(autoincrement())
  created         DateTime @default(now())
  chat            String
  //누가 썼냐
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  //어느 룸에다 썼냐
  chatRoom        ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId      Int
  isReservedAlarm Boolean  @default(false)

  @@index([userId, chatRoomId])
}

model Reservation {
  id      Int      @id @default(autoincrement())
  created DateTime @default(now())
  updated DateTime @updatedAt
  date    DateTime
  //예약하는 나
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int

  //예약하는 상품
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int     @unique

  @@index([userId, productId])
}

model Review {
  id               Int      @id @default(autoincrement())
  created          DateTime @default(now())
  updated          DateTime @updatedAt
  kind             String
  review           String
  reviewCheckBoxes String
  score            Int
  createdBy        User     @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById      Int
  createdFor       User     @relation(name: "receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId     Int
  product          Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId        Int

  @@index([createdById, createdForId, productId])
}
